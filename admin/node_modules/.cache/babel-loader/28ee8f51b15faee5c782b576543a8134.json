{"ast":null,"code":"'use strict';\n\nvar firebase = require('@firebase/app');\n\nvar component = require('@firebase/component');\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"already-activated\"\n/* ALREADY_ACTIVATED */\n] = 'You are trying to activate AppCheck for FirebaseApp {$appName}, ' + 'while it is already activated. ' + 'AppCheck can only be activated once.', _a[\"use-before-activation\"\n/* USE_BEFORE_ACTIVATION */\n] = 'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' + 'Please make sure you call activate() before instantiating other Firebase services.', _a[\"fetch-network-error\"\n/* FETCH_NETWORK_ERROR */\n] = 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.', _a[\"fetch-parse-error\"\n/* FETCH_PARSE_ERROR */\n] = 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.', _a[\"fetch-status-error\"\n/* FETCH_STATUS_ERROR */\n] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.', _a[\"storage-open\"\n/* STORAGE_OPEN */\n] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.', _a[\"storage-get\"\n/* STORAGE_GET */\n] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.', _a[\"storage-set\"\n/* STORAGE_WRITE */\n] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.', _a[\"recaptcha-error\"\n/* RECAPTCHA_ERROR */\n] = 'ReCAPTCHA error.', _a);\nvar ERROR_FACTORY = new util.ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar APP_CHECK_STATES = new Map();\nvar DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nvar DEBUG_STATE = {\n  enabled: false\n};\n\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nvar TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nvar Refresher =\n/** @class */\nfunction () {\n  function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  Refresher.prototype.start = function () {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(function () {\n      /* we don't care about the result */\n    });\n  };\n\n  Refresher.prototype.stop = function () {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  };\n\n  Refresher.prototype.isRunning = function () {\n    return !!this.pending;\n  };\n\n  Refresher.prototype.process = function (hasSucceeded) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var error_1;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.stop();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            this.pending = new util.Deferred();\n            return [4\n            /*yield*/\n            , sleep(this.getNextRun(hasSucceeded))];\n\n          case 2:\n            _a.sent(); // Why do we resolve a promise, then immediate wait for it?\n            // We do it to make the promise chain cancellable.\n            // We can call stop() which rejects the promise before the following line execute, which makes\n            // the code jump to the catch block.\n            // TODO: unit test this\n\n\n            this.pending.resolve();\n            return [4\n            /*yield*/\n            , this.pending.promise];\n\n          case 3:\n            _a.sent();\n\n            this.pending = new util.Deferred();\n            return [4\n            /*yield*/\n            , this.operation()];\n\n          case 4:\n            _a.sent();\n\n            this.pending.resolve();\n            return [4\n            /*yield*/\n            , this.pending.promise];\n\n          case 5:\n            _a.sent();\n\n            this.process(true).catch(function () {\n              /* we don't care about the result */\n            });\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            error_1 = _a.sent();\n\n            if (this.retryPolicy(error_1)) {\n              this.process(false).catch(function () {\n                /* we don't care about the result */\n              });\n            } else {\n              this.stop();\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Refresher.prototype.getNextRun = function (hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      var currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n\n      return currentErrorWaitInterval;\n    }\n  };\n\n  return Refresher;\n}();\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getRecaptcha() {\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\n\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\n\nfunction formatDummyToken(tokenErrorData) {\n  return util.base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction exchangeToken(_a, platformLoggerProvider) {\n  var url = _a.url,\n      body = _a.body;\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var headers, platformLogger, options, response, originalError_1, responseBody, originalError_2, match, timeToLiveAsNumber, now;\n    return tslib.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          headers = {\n            'Content-Type': 'application/json'\n          };\n          platformLogger = platformLoggerProvider.getImmediate({\n            optional: true\n          });\n\n          if (platformLogger) {\n            headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n          }\n\n          options = {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: headers\n          };\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , fetch(url, options)];\n\n        case 2:\n          response = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          originalError_1 = _b.sent();\n          throw ERROR_FACTORY.create(\"fetch-network-error\"\n          /* FETCH_NETWORK_ERROR */\n          , {\n            originalErrorMessage: originalError_1.message\n          });\n\n        case 4:\n          if (response.status !== 200) {\n            throw ERROR_FACTORY.create(\"fetch-status-error\"\n            /* FETCH_STATUS_ERROR */\n            , {\n              httpStatus: response.status\n            });\n          }\n\n          _b.label = 5;\n\n        case 5:\n          _b.trys.push([5, 7,, 8]);\n\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 6:\n          // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n          responseBody = _b.sent();\n          return [3\n          /*break*/\n          , 8];\n\n        case 7:\n          originalError_2 = _b.sent();\n          throw ERROR_FACTORY.create(\"fetch-parse-error\"\n          /* FETCH_PARSE_ERROR */\n          , {\n            originalErrorMessage: originalError_2.message\n          });\n\n        case 8:\n          match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n          if (!match || !match[2] || isNaN(Number(match[1]))) {\n            throw ERROR_FACTORY.create(\"fetch-parse-error\"\n            /* FETCH_PARSE_ERROR */\n            , {\n              originalErrorMessage: \"ttl field (timeToLive) is not in standard Protobuf Duration \" + (\"format: \" + responseBody.ttl)\n            });\n          }\n\n          timeToLiveAsNumber = Number(match[1]) * 1000;\n          now = Date.now();\n          return [2\n          /*return*/\n          , {\n            token: responseBody.attestationToken,\n            expireTimeMillis: now + timeToLiveAsNumber,\n            issuedAtTimeMillis: now\n          }];\n      }\n    });\n  });\n}\n\nfunction getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {\n  var _a = app.options,\n      projectId = _a.projectId,\n      appId = _a.appId,\n      apiKey = _a.apiKey;\n  return {\n    url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_RECAPTCHA_TOKEN_METHOD + \"?key=\" + apiKey,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  var _a = app.options,\n      projectId = _a.projectId,\n      appId = _a.appId,\n      apiKey = _a.apiKey;\n  return {\n    url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_DEBUG_TOKEN_METHOD + \"?key=\" + apiKey,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DB_NAME = 'firebase-app-check-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-app-check-store';\nvar DEBUG_TOKEN_KEY = 'debug-token';\nvar dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise(function (resolve, reject) {\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n\n      request.onerror = function (event) {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nfunction write(key, value) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, transaction, store, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getDBPromise()];\n\n        case 1:\n          db = _a.sent();\n          transaction = db.transaction(STORE_NAME, 'readwrite');\n          store = transaction.objectStore(STORE_NAME);\n          request = store.put({\n            compositeKey: key,\n            value: value\n          });\n          return [2\n          /*return*/\n          , new Promise(function (resolve, reject) {\n            request.onsuccess = function (_event) {\n              resolve();\n            };\n\n            transaction.onerror = function (event) {\n              var _a;\n\n              reject(ERROR_FACTORY.create(\"storage-set\"\n              /* STORAGE_WRITE */\n              , {\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n              }));\n            };\n          })];\n      }\n    });\n  });\n}\n\nfunction read(key) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, transaction, store, request;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getDBPromise()];\n\n        case 1:\n          db = _a.sent();\n          transaction = db.transaction(STORE_NAME, 'readonly');\n          store = transaction.objectStore(STORE_NAME);\n          request = store.get(key);\n          return [2\n          /*return*/\n          , new Promise(function (resolve, reject) {\n            request.onsuccess = function (event) {\n              var result = event.target.result;\n\n              if (result) {\n                resolve(result.value);\n              } else {\n                resolve(undefined);\n              }\n            };\n\n            transaction.onerror = function (event) {\n              var _a;\n\n              reject(ERROR_FACTORY.create(\"storage-get\"\n              /* STORAGE_GET */\n              , {\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n              }));\n            };\n          })];\n      }\n    });\n  });\n}\n\nfunction computeKey(app) {\n  return app.options.appId + \"-\" + app.name;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new logger$1.Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nfunction readTokenFromStorage(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var token, e_1;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!util.isIndexedDBAvailable()) return [3\n          /*break*/\n          , 5];\n          token = undefined;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , readTokenFromIndexedDB(app)];\n\n        case 2:\n          token = _a.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_1 = _a.sent(); // swallow the error and return undefined\n\n          logger.warn(\"Failed to read token from indexeddb. Error: \" + e_1);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          return [2\n          /*return*/\n          , token];\n\n        case 5:\n          return [2\n          /*return*/\n          , undefined];\n      }\n    });\n  });\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction writeTokenToStorage(app, token) {\n  if (util.isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(function (e) {\n      // swallow the error and resolve the promise\n      logger.warn(\"Failed to write token to indexeddb. Error: \" + e);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nfunction readOrCreateDebugTokenFromStorage() {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var existingDebugToken, newToken;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          existingDebugToken = undefined;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , readDebugTokenFromIndexedDB()];\n\n        case 2:\n          existingDebugToken = _a.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          if (!existingDebugToken) {\n            newToken = uuidv4(); // We don't need to block on writing to indexeddb\n            // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n            // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n            // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n            // You should switch to a different browser that supports indexeddb\n\n            writeDebugTokenToIndexedDB(newToken).catch(function (e) {\n              return logger.warn(\"Failed to persist debug token to indexeddb. Error: \" + e);\n            }); // Not using logger because I don't think we ever want this accidentally hidden?\n\n            console.log(\"AppCheck debug token: \" + newToken + \". You will need to whitelist it in the Firebase console for it to work\");\n            return [2\n            /*return*/\n            , newToken];\n          } else {\n            return [2\n            /*return*/\n            , existingDebugToken];\n          }\n\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isDebugMode() {\n  var debugState = getDebugState();\n  return debugState.enabled;\n}\n\nfunction getDebugToken() {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var state;\n    return tslib.__generator(this, function (_a) {\n      state = getDebugState();\n\n      if (state.enabled && state.token) {\n        return [2\n        /*return*/\n        , state.token.promise];\n      } else {\n        // should not happen!\n        throw Error(\"\\n            Can't get debug token in production mode.\\n        \");\n      }\n    });\n  });\n}\n\nfunction initializeDebugMode() {\n  var globals = util.getGlobal();\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  var debugState = getDebugState();\n  debugState.enabled = true;\n  var deferredToken = new util.Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nvar defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * This function will always resolve.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\nfunction getToken$2(app, platformLoggerProvider, forceRefresh) {\n  if (forceRefresh === void 0) {\n    forceRefresh = false;\n  }\n\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var state, token, error, cachedToken, tokenFromDebugExchange, _a, _b, _c, e_1, interopTokenResult;\n\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          ensureActivated(app);\n          state = getState(app);\n          token = state.token;\n          error = undefined;\n          if (!!token) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , state.cachedTokenPromise];\n\n        case 1:\n          cachedToken = _d.sent();\n\n          if (cachedToken && isValid(cachedToken)) {\n            token = cachedToken;\n            setState(app, tslib.__assign(tslib.__assign({}, state), {\n              token: token\n            })); // notify all listeners with the cached token\n\n            notifyTokenListeners(app, {\n              token: token.token\n            });\n          }\n\n          _d.label = 2;\n\n        case 2:\n          // Return the cached token (from either memory or indexedDB) if it's valid\n          if (!forceRefresh && token && isValid(token)) {\n            return [2\n            /*return*/\n            , {\n              token: token.token\n            }];\n          }\n\n          if (!isDebugMode()) return [3\n          /*break*/\n          , 6];\n          _a = exchangeToken;\n          _b = getExchangeDebugTokenRequest;\n          _c = [app];\n          return [4\n          /*yield*/\n          , getDebugToken()];\n\n        case 3:\n          return [4\n          /*yield*/\n          , _a.apply(void 0, [_b.apply(void 0, _c.concat([_d.sent()])), platformLoggerProvider])];\n\n        case 4:\n          tokenFromDebugExchange = _d.sent(); // Write debug token to indexedDB.\n\n          return [4\n          /*yield*/\n          , writeTokenToStorage(app, tokenFromDebugExchange)];\n\n        case 5:\n          // Write debug token to indexedDB.\n          _d.sent(); // Write debug token to state.\n\n\n          setState(app, tslib.__assign(tslib.__assign({}, state), {\n            token: tokenFromDebugExchange\n          }));\n          return [2\n          /*return*/\n          , {\n            token: tokenFromDebugExchange.token\n          }];\n\n        case 6:\n          _d.trys.push([6, 8,, 9]);\n\n          return [4\n          /*yield*/\n          , state.provider.getToken()];\n\n        case 7:\n          // state.provider is populated in initializeAppCheck()\n          // ensureActivated() at the top of this function checks that\n          // initializeAppCheck() has been called.\n          token = _d.sent();\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          e_1 = _d.sent(); // `getToken()` should never throw, but logging error text to console will aid debugging.\n\n          logger.error(e_1);\n          error = e_1;\n          return [3\n          /*break*/\n          , 9];\n\n        case 9:\n          if (!!token) return [3\n          /*break*/\n          , 10]; // if token is undefined, there must be an error.\n          // we return a dummy token along with the error\n\n          interopTokenResult = makeDummyTokenResult(error);\n          return [3\n          /*break*/\n          , 12];\n\n        case 10:\n          interopTokenResult = {\n            token: token.token\n          }; // write the new token to the memory state as well as the persistent storage.\n          // Only do it if we got a valid new token\n\n          setState(app, tslib.__assign(tslib.__assign({}, state), {\n            token: token\n          }));\n          return [4\n          /*yield*/\n          , writeTokenToStorage(app, token)];\n\n        case 11:\n          _d.sent();\n\n          _d.label = 12;\n\n        case 12:\n          notifyTokenListeners(app, interopTokenResult);\n          return [2\n          /*return*/\n          , interopTokenResult];\n      }\n    });\n  });\n}\n\nfunction addTokenListener(app, platformLoggerProvider, type, listener, onError) {\n  var state = getState(app);\n  var tokenListener = {\n    next: listener,\n    error: onError,\n    type: type\n  };\n\n  var newState = tslib.__assign(tslib.__assign({}, state), {\n    tokenObservers: tslib.__spreadArray(tslib.__spreadArray([], state.tokenObservers), [tokenListener])\n  });\n  /**\r\n   * Invoke the listener with the valid token, then start the token refresher\r\n   */\n\n\n  if (!newState.tokenRefresher) {\n    var tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n    newState.tokenRefresher = tokenRefresher;\n  } // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  } // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n\n  if (state.token && isValid(state.token)) {\n    var validToken_1 = state.token;\n    Promise.resolve().then(function () {\n      return listener({\n        token: validToken_1.token\n      });\n    }).catch(function () {\n      /** Ignore errors in listeners. */\n    });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state.cachedTokenPromise // Storage token promise. Always populated in `activate()`.\n    .then(function (cachedToken) {\n      if (cachedToken && isValid(cachedToken)) {\n        listener({\n          token: cachedToken.token\n        });\n      }\n    }).catch(function () {\n      /** Ignore errors in listeners. */\n    });\n  }\n\n  setState(app, newState);\n}\n\nfunction removeTokenListener(app, listener) {\n  var state = getState(app);\n  var newObservers = state.tokenObservers.filter(function (tokenObserver) {\n    return tokenObserver.next !== listener;\n  });\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\n\nfunction createTokenRefresher(app, platformLoggerProvider) {\n  var _this = this;\n\n  return new Refresher( // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var state, result;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            state = getState(app);\n            if (!!state.token) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , getToken$2(app, platformLoggerProvider)];\n\n          case 1:\n            result = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , getToken$2(app, platformLoggerProvider, true)];\n\n          case 3:\n            result = _a.sent();\n            _a.label = 4;\n\n          case 4:\n            // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n            if (result.error) {\n              throw result.error;\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, function () {\n    // TODO: when should we retry?\n    return true;\n  }, function () {\n    var state = getState(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  var observers = getState(app).tokenObservers;\n\n  for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {\n    var observer = observers_1[_i];\n\n    try {\n      if (observer.type === \"EXTERNAL\"\n      /* EXTERNAL */\n      && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (ignored) {// Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error: error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nfunction initialize(app, siteKey) {\n  var state = getState(app);\n  var initialized = new util.Deferred();\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    reCAPTCHAState: {\n      initialized: initialized\n    }\n  }));\n  var divId = \"fire_app_check_\" + app.name;\n  var invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  var grecaptcha = getRecaptcha();\n\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(function () {\n      var grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      grecaptcha.ready(function () {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(function () {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nfunction getToken$1(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var reCAPTCHAState, recaptcha;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ensureActivated(app);\n          reCAPTCHAState = getState(app).reCAPTCHAState;\n          return [4\n          /*yield*/\n          , reCAPTCHAState.initialized.promise];\n\n        case 1:\n          recaptcha = _a.sent();\n          return [2\n          /*return*/\n          , new Promise(function (resolve, _reject) {\n            // Updated after initialization is complete.\n            var reCAPTCHAState = getState(app).reCAPTCHAState;\n            recaptcha.ready(function () {\n              resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n              recaptcha.execute(reCAPTCHAState.widgetId, {\n                action: 'fire_app_check'\n              }));\n            });\n          })];\n      }\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  var widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  var state = getState(app);\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    reCAPTCHAState: tslib.__assign(tslib.__assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId: widgetId\n    })\n  }));\n}\n\nfunction loadReCAPTCHAScript(onload) {\n  var script = document.createElement('script');\n  script.src = \"\" + RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n */\n\n\nvar ReCaptchaV3Provider =\n/** @class */\nfunction () {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  function ReCaptchaV3Provider(_siteKey) {\n    this._siteKey = _siteKey;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  ReCaptchaV3Provider.prototype.getToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var attestedClaimsToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._app || !this._platformLoggerProvider) {\n              // This should only occur if user has not called initializeAppCheck().\n              // We don't have an appName to provide if so.\n              // This should already be caught in the top level `getToken()` function.\n              throw ERROR_FACTORY.create(\"use-before-activation\"\n              /* USE_BEFORE_ACTIVATION */\n              , {\n                appName: ''\n              });\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , getToken$1(this._app)];\n\n          case 2:\n            attestedClaimsToken = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent(); // reCaptcha.execute() throws null which is not very descriptive.\n\n\n            throw ERROR_FACTORY.create(\"recaptcha-error\"\n            /* RECAPTCHA_ERROR */\n            );\n\n          case 4:\n            return [2\n            /*return*/\n            , exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider)];\n        }\n      });\n    });\n  };\n\n  ReCaptchaV3Provider.prototype.initialize = function (app, platformLoggerProvider) {\n    this._app = app;\n    this._platformLoggerProvider = platformLoggerProvider;\n    initialize(app, this._siteKey).catch(function () {\n      /* we don't care about the initialization result */\n    });\n  };\n\n  return ReCaptchaV3Provider;\n}();\n/**\r\n * Custom provider class.\r\n */\n\n\nvar CustomProvider =\n/** @class */\nfunction () {\n  function CustomProvider(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  CustomProvider.prototype.getToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._app) {\n              // This should only occur if user has not called initializeAppCheck().\n              // We don't have an appName to provide if so.\n              // This should already be caught in the top level `getToken()` function.\n              throw ERROR_FACTORY.create(\"use-before-activation\"\n              /* USE_BEFORE_ACTIVATION */\n              , {\n                appName: ''\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this._customProviderOptions.getToken()];\n\n          case 1:\n            customToken = _a.sent();\n            issuedAtTimeSeconds = util.issuedAtTime(customToken.token);\n            issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n            return [2\n            /*return*/\n            , tslib.__assign(tslib.__assign({}, customToken), {\n              issuedAtTimeMillis: issuedAtTimeMillis\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * @internal\r\n   */\n\n\n  CustomProvider.prototype.initialize = function (app) {\n    this._app = app;\n  };\n\n  return CustomProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param app\r\n * @param siteKeyOrProvider - optional custom attestation provider\r\n * or reCAPTCHA provider\r\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\r\n * of appCheck token.\r\n */\n\n\nfunction activate(app, siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled) {\n  var state = getState(app);\n\n  if (state.activated) {\n    throw ERROR_FACTORY.create(\"already-activated\"\n    /* ALREADY_ACTIVATED */\n    , {\n      appName: app.name\n    });\n  }\n\n  var newState = tslib.__assign(tslib.__assign({}, state), {\n    activated: true\n  }); // Read cached token from storage if it exists and store it in memory.\n\n\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(function (cachedToken) {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, tslib.__assign(tslib.__assign({}, getState(app)), {\n        token: cachedToken\n      }));\n    }\n\n    return cachedToken;\n  });\n\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n  } else if (siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) {\n    newState.provider = siteKeyOrProvider;\n  } else {\n    // Process \"old\" custom provider to avoid breaking previous users.\n    // This was defined at beta release as simply an object with a\n    // getToken() method.\n    newState.provider = new CustomProvider({\n      getToken: siteKeyOrProvider.getToken\n    });\n  } // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app, platformLoggerProvider);\n}\n\nfunction setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled) {\n  var state = getState(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  setState(app, tslib.__assign(tslib.__assign({}, state), {\n    isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Differs from internal getToken in that it throws the error.\r\n */\n\n\nfunction getToken(app, platformLoggerProvider, forceRefresh) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var result;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getToken$2(app, platformLoggerProvider, forceRefresh)];\n\n        case 1:\n          result = _a.sent();\n\n          if (result.error) {\n            throw result.error;\n          }\n\n          return [2\n          /*return*/\n          , {\n            token: result.token\n          }];\n      }\n    });\n  });\n}\n\nfunction onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  var nextFn = function () {};\n\n  var errorFn = function () {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  addTokenListener(app, platformLoggerProvider, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n  return function () {\n    return removeTokenListener(app, nextFn);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction factory(app, platformLoggerProvider) {\n  return {\n    app: app,\n    activate: function (siteKeyOrProvider, isTokenAutoRefreshEnabled) {\n      return activate(app, // Public types of ReCaptchaV3Provider/CustomProvider don't\n      // expose getToken() and aren't recognized as the internal\n      // class version of themselves.\n      siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled);\n    },\n    setTokenAutoRefreshEnabled: function (isTokenAutoRefreshEnabled) {\n      return setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled);\n    },\n    getToken: function (forceRefresh) {\n      return getToken(app, platformLoggerProvider, forceRefresh);\n    },\n    onTokenChanged: function (onNextOrObserver, onError, onCompletion) {\n      return onTokenChanged(app, platformLoggerProvider,\n      /**\r\n       * This can still be an observer. Need to do this casting because\r\n       * according to Typescript: \"Implementation signatures of overloads\r\n       * are not externally visible\"\r\n       */\n      onNextOrObserver, onError);\n    },\n    INTERNAL: {\n      delete: function () {\n        var tokenObservers = getState(app).tokenObservers;\n\n        for (var _i = 0, tokenObservers_1 = tokenObservers; _i < tokenObservers_1.length; _i++) {\n          var tokenObserver = tokenObservers_1[_i];\n          removeTokenListener(app, tokenObserver.next);\n        }\n\n        return Promise.resolve();\n      }\n    }\n  };\n}\n\nfunction internalFactory(app, platformLoggerProvider) {\n  return {\n    getToken: function (forceRefresh) {\n      return getToken$2(app, platformLoggerProvider, forceRefresh);\n    },\n    addTokenListener: function (listener) {\n      return addTokenListener(app, platformLoggerProvider, \"INTERNAL\"\n      /* INTERNAL */\n      , listener);\n    },\n    removeTokenListener: function (listener) {\n      return removeTokenListener(app, listener);\n    }\n  };\n}\n\nvar name = \"@firebase/app-check\";\nvar version = \"0.3.2\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar APP_CHECK_NAME = 'appCheck';\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck(firebase) {\n  // The public interface\n  firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    return factory(app, platformLoggerProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    ReCaptchaV3Provider: ReCaptchaV3Provider,\n    CustomProvider: CustomProvider\n  })\n  /**\r\n   * AppCheck can only be initialized by explicitly calling firebase.appCheck()\r\n   * We don't want firebase products that consume AppCheck to gate on AppCheck\r\n   * if the user doesn't intend them to, just because the AppCheck component\r\n   * is registered.\r\n   */\n  .setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Because all firebase products that depend on app-check depend on app-check-internal directly,\r\n   * we need to initialize app-check-internal after app-check is initialized to make it\r\n   * available to other firebase products.\r\n   */\n  .setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {\n    var appCheckInternalProvider = container.getProvider(APP_CHECK_NAME_INTERNAL);\n    appCheckInternalProvider.initialize();\n  })); // The internal interface used by other Firebase products\n\n  firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME_INTERNAL, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var platformLoggerProvider = container.getProvider('platform-logger');\n    return internalFactory(app, platformLoggerProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n  firebase.registerVersion(name, version);\n}\n\nregisterAppCheck(firebase__default['default']);\ninitializeDebugMode();","map":{"version":3,"sources":["../src/errors.ts","../src/state.ts","../src/constants.ts","../src/proactive-refresh.ts","../src/util.ts","../src/client.ts","../src/indexeddb.ts","../src/logger.ts","../src/storage.ts","../src/debug.ts","../src/internal-api.ts","../src/recaptcha.ts","../src/providers.ts","../src/api.ts","../src/factory.ts","../src/index.ts"],"names":["ErrorFactory","Deferred","base64","Logger","isIndexedDBAvailable","getGlobal","getToken","getReCAPTCHAToken","initializeRecaptcha","issuedAtTime","getTokenInternal","Component","ReCaptchaV3ProviderImpl","CustomProviderImpl","firebase"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_ACTIVATED = 'already-activated',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_ACTIVATED]:\n    'You are trying to activate AppCheck for FirebaseApp {$appName}, ' +\n    'while it is already activated. ' +\n    'AppCheck can only be activated once.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Please make sure you call activate() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_ACTIVATED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { AppCheckToken, AppCheckTokenResult } from '@firebase/app-check-types';\nimport { AppCheckTokenListener } from '@firebase/app-check-interop-types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred, PartialObserver } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nimport { AppCheckProviderInternal } from './providers';\n\nexport interface AppCheckTokenInternal extends AppCheckToken {\n  issuedAtTimeMillis: number;\n}\n\nexport interface AppCheckTokenObserver\n  extends PartialObserver<AppCheckTokenResult> {\n  // required\n  next: AppCheckTokenListener;\n  type: ListenerType;\n}\n\nexport const enum ListenerType {\n  'INTERNAL' = 'INTERNAL',\n  'EXTERNAL' = 'EXTERNAL'\n}\n\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProviderInternal;\n  siteKey?: string;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  enabled: boolean;\n  // This is the debug token string the user interacts with.\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { base64 } from '@firebase/util';\n\nexport function getRecaptcha(): GreCAPTCHA | undefined {\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './state';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from indexeddb. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to indexeddb. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to indexeddb. Error: ${e}`)\n    );\n    // Not using logger because I don't think we ever want this accidentally hidden?\n    console.log(\n      `AppCheck debug token: ${newToken}. You will need to whitelist it in the Firebase console for it to work`\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  const debugState = getDebugState();\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  AppCheckTokenListener,\n  AppCheckTokenResult\n} from '@firebase/app-check-interop-types';\nimport {\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  getState,\n  ListenerType,\n  setState\n} from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated, formatDummyToken } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { logger } from './logger';\nimport { Provider } from '@firebase/component';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * This function will always resolve.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n\n      setState(app, { ...state, token });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: token.token });\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange: AppCheckTokenInternal = await exchangeToken(\n      getExchangeDebugTokenRequest(app, await getDebugToken()),\n      platformLoggerProvider\n    );\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // state.provider is populated in initializeAppCheck()\n    // ensureActivated() at the top of this function checks that\n    // initializeAppCheck() has been called.\n    token = await state.provider!.getToken();\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const state = getState(app);\n  const tokenListener: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  const newState = {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenListener]\n  };\n\n  /**\n   * Invoke the listener with the valid token, then start the token refresher\n   */\n  if (!newState.tokenRefresher) {\n    const tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n    newState.tokenRefresher = tokenRefresher;\n  }\n\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    newState.tokenRefresher.start();\n  }\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => listener({ token: validToken.token }))\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  } else if (state.token == null) {\n    // Only check cache if there was no token. If the token was invalid,\n    // skip this and rely on exchange endpoint.\n    void state\n      .cachedTokenPromise! // Storage token promise. Always populated in `activate()`.\n      .then(cachedToken => {\n        if (cachedToken && isValid(cachedToken)) {\n          listener({ token: cachedToken.token });\n        }\n      })\n      .catch(() => {\n        /** Ignore errors in listeners. */\n      });\n  }\n\n  setState(app, newState);\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: (token: AppCheckTokenResult) => void\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\nfunction createTokenRefresher(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Refresher {\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(app, platformLoggerProvider);\n      } else {\n        result = await getToken(app, platformLoggerProvider, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      // TODO: when should we retry?\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nfunction notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (ignored) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nexport function initialize(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHA | undefined;\n  }\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { Provider } from '@firebase/component';\nimport { issuedAtTime } from '@firebase/util';\nimport { CustomProviderOptions } from '../../app-check-types';\nimport { exchangeToken, getExchangeRecaptchaTokenRequest } from './client';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getToken as getReCAPTCHAToken,\n  initialize as initializeRecaptcha\n} from './recaptcha';\nimport { AppCheckTokenInternal } from './state';\n\nexport interface AppCheckProviderInternal {\n  /**\n   * Returns an AppCheck token.\n   */\n  getToken(): Promise<AppCheckTokenInternal>;\n  /**\n   * Initialize the class once app and platformLoggerProvider are available.\n   */\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void;\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n */\nexport class ReCaptchaV3Provider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n  private _platformLoggerProvider?: Provider<'platform-logger'>;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app || !this._platformLoggerProvider) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    let attestedClaimsToken;\n    try {\n      attestedClaimsToken = await getReCAPTCHAToken(this._app);\n    } catch (e) {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    return exchangeToken(\n      getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken),\n      this._platformLoggerProvider\n    );\n  }\n\n  initialize(\n    app: FirebaseApp,\n    platformLoggerProvider: Provider<'platform-logger'>\n  ): void {\n    this._app = app;\n    this._platformLoggerProvider = platformLoggerProvider;\n    initializeRecaptcha(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n}\n\n/**\n * Custom provider class.\n */\nexport class CustomProvider implements AppCheckProviderInternal {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    if (!this._app) {\n      // This should only occur if user has not called initializeAppCheck().\n      // We don't have an appName to provide if so.\n      // This should already be caught in the top level `getToken()` function.\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: ''\n      });\n    }\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckProvider,\n  AppCheckTokenResult\n} from '@firebase/app-check-types';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, ListenerType } from './state';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, NextFn, PartialObserver, Unsubscribe } from '@firebase/util';\nimport { CustomProvider, ReCaptchaV3Provider } from './providers';\nimport { readTokenFromStorage } from './storage';\n\n/**\n *\n * @param app\n * @param siteKeyOrProvider - optional custom attestation provider\n * or reCAPTCHA provider\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\n * of appCheck token.\n */\nexport function activate(\n  app: FirebaseApp,\n  siteKeyOrProvider:\n    | ReCaptchaV3Provider\n    | CustomProvider\n    // This is the old interface for users to supply a custom provider.\n    | AppCheckProvider\n    | string,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n  if (state.activated) {\n    throw ERROR_FACTORY.create(AppCheckError.ALREADY_ACTIVATED, {\n      appName: app.name\n    });\n  }\n\n  const newState: AppCheckState = { ...state, activated: true };\n\n  // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n    }\n    return cachedToken;\n  });\n\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n  } else if (\n    siteKeyOrProvider instanceof ReCaptchaV3Provider ||\n    siteKeyOrProvider instanceof CustomProvider\n  ) {\n    newState.provider = siteKeyOrProvider;\n  } else {\n    // Process \"old\" custom provider to avoid breaking previous users.\n    // This was defined at beta release as simply an object with a\n    // getToken() method.\n    newState.provider = new CustomProvider({\n      getToken: siteKeyOrProvider.getToken\n    });\n  }\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app, platformLoggerProvider);\n}\n\nexport function setTokenAutoRefreshEnabled(\n  app: FirebaseApp,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n\n/**\n * Differs from internal getToken in that it throws the error.\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    app,\n    platformLoggerProvider,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Wraps addTokenListener/removeTokenListener methods in an Observer\n * pattern for public use.\n */\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\nexport function onTokenChanged(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    app,\n    platformLoggerProvider,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(app, nextFn);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppCheck,\n  AppCheckProvider,\n  AppCheckTokenResult,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport {\n  activate,\n  setTokenAutoRefreshEnabled,\n  getToken,\n  onTokenChanged\n} from './api';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAppCheckInternal } from '@firebase/app-check-interop-types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { Provider } from '@firebase/component';\nimport { PartialObserver } from '@firebase/util';\n\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { getState, ListenerType } from './state';\n\nexport function factory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheck & FirebaseService {\n  return {\n    app,\n    activate: (\n      siteKeyOrProvider:\n        | ReCaptchaV3Provider\n        | CustomProvider\n        | AppCheckProvider\n        | string,\n      isTokenAutoRefreshEnabled?: boolean\n    ) =>\n      activate(\n        app,\n        // Public types of ReCaptchaV3Provider/CustomProvider don't\n        // expose getToken() and aren't recognized as the internal\n        // class version of themselves.\n        siteKeyOrProvider as\n          | ReCaptchaV3ProviderImpl\n          | CustomProviderImpl\n          | AppCheckProvider\n          | string,\n        platformLoggerProvider,\n        isTokenAutoRefreshEnabled\n      ),\n    setTokenAutoRefreshEnabled: (isTokenAutoRefreshEnabled: boolean) =>\n      setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled),\n    getToken: forceRefresh =>\n      getToken(app, platformLoggerProvider, forceRefresh),\n    onTokenChanged: (\n      onNextOrObserver:\n        | ((tokenResult: AppCheckTokenResult) => void)\n        | PartialObserver<AppCheckTokenResult>,\n      onError?: (error: Error) => void,\n      onCompletion?: () => void\n    ) =>\n      onTokenChanged(\n        app,\n        platformLoggerProvider,\n        /**\n         * This can still be an observer. Need to do this casting because\n         * according to Typescript: \"Implementation signatures of overloads\n         * are not externally visible\"\n         */\n        onNextOrObserver as (tokenResult: AppCheckTokenResult) => void,\n        onError,\n        onCompletion\n      ),\n    INTERNAL: {\n      delete: () => {\n        const { tokenObservers } = getState(app);\n        for (const tokenObserver of tokenObservers) {\n          removeTokenListener(app, tokenObserver.next);\n        }\n        return Promise.resolve();\n      }\n    }\n  };\n}\n\nexport function internalFactory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh =>\n      getTokenInternal(app, platformLoggerProvider, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(\n        app,\n        platformLoggerProvider,\n        ListenerType.INTERNAL,\n        listener\n      ),\n    removeTokenListener: listener => removeTokenListener(app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport {\n  FirebaseAppCheck,\n  AppCheckComponentName,\n  ReCaptchaV3Provider,\n  CustomProvider\n} from '@firebase/app-check-types';\nimport { factory, internalFactory } from './factory';\nimport {\n  ReCaptchaV3Provider as ReCaptchaV3ProviderImpl,\n  CustomProvider as CustomProviderImpl\n} from './providers';\nimport { initializeDebugMode } from './debug';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { name, version } from '../package.json';\n\nconst APP_CHECK_NAME: AppCheckComponentName = 'appCheck';\nconst APP_CHECK_NAME_INTERNAL: AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(firebase: _FirebaseNamespace): void {\n  // The public interface\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return factory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ReCaptchaV3Provider: ReCaptchaV3ProviderImpl,\n        CustomProvider: CustomProviderImpl\n      })\n      /**\n       * AppCheck can only be initialized by explicitly calling firebase.appCheck()\n       * We don't want firebase products that consume AppCheck to gate on AppCheck\n       * if the user doesn't intend them to, just because the AppCheck component\n       * is registered.\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on app-check depend on app-check-internal directly,\n       * we need to initialize app-check-internal after app-check is initialized to make it\n       * available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const appCheckInternalProvider = container.getProvider(\n            APP_CHECK_NAME_INTERNAL\n          );\n          appCheckInternalProvider.initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return internalFactory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  firebase.registerVersion(name, version);\n}\n\nregisterAppCheck(firebase as _FirebaseNamespace);\ninitializeDebugMode();\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n    ReCaptchaV3Provider: typeof ReCaptchaV3Provider;\n    CustomProvider: typeof CustomProvider;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}